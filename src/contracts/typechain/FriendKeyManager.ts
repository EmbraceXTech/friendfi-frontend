/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FriendKeyManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DIGEST_BATCH"
      | "DIGEST_RETURNS"
      | "MERGE_FEES"
      | "MERGE_PIECES"
      | "MIN_USERS"
      | "RANDOM_WINDOW"
      | "USER_DIVIDEN"
      | "acceptOwnership"
      | "addressPrice"
      | "addressUUIDs"
      | "addresses"
      | "batchMint"
      | "bytesToUint256"
      | "claimFee"
      | "cooldownDuration"
      | "feeChangeRate"
      | "getMintFee"
      | "handleOracleFulfillment"
      | "isRegistered"
      | "keys"
      | "lastMintTimestamp"
      | "lastRequestId"
      | "latestMintFee"
      | "maxFee"
      | "merge"
      | "minFee"
      | "mint"
      | "mintDigest"
      | "mintRequests"
      | "numUsers"
      | "owner"
      | "pendingUUID"
      | "prices"
      | "rawFulfillRandomWords"
      | "register"
      | "requestIds"
      | "s_lastError"
      | "s_lastRequestId"
      | "s_lastResponse"
      | "transferOwnership"
      | "uint256ToAddress"
      | "uuidAddresses"
      | "uuidPrice"
      | "uuids"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "RequestFulfilled(bytes32)"
      | "RequestFulfilled(uint256,uint256[])"
      | "RequestSent(bytes32)"
      | "RequestSent(uint256,uint32)"
      | "Response"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DIGEST_BATCH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DIGEST_RETURNS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "MERGE_FEES",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "MERGE_PIECES",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_USERS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "RANDOM_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USER_DIVIDEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addressUUIDs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bytesToUint256",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cooldownDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeChangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "keys", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "lastMintTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestMintFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "merge",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "minFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "mint", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "mintDigest",
    values: [BigNumberish, BigNumberish[], BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "numUsers", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingUUID",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "prices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "s_lastError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_lastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_lastResponse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uint256ToAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uuidAddresses",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "uuidPrice", values: [string]): string;
  encodeFunctionData(functionFragment: "uuids", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "DIGEST_BATCH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DIGEST_RETURNS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MERGE_FEES", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MERGE_PIECES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_USERS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RANDOM_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USER_DIVIDEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressUUIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addresses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bytesToUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cooldownDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeChangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMintFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastMintTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestMintFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintDigest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requestIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_lastError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_lastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_lastResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uint256ToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uuidAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uuidPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uuids", data: BytesLike): Result;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFulfilled_bytes32_Event {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFulfilled_uint256_uint256_array_Event {
  export type InputTuple = [
    requestId: BigNumberish,
    randomWords: BigNumberish[]
  ];
  export type OutputTuple = [requestId: bigint, randomWords: bigint[]];
  export interface OutputObject {
    requestId: bigint;
    randomWords: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSent_bytes32_Event {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSent_uint256_uint32_Event {
  export type InputTuple = [requestId: BigNumberish, numWords: BigNumberish];
  export type OutputTuple = [requestId: bigint, numWords: bigint];
  export interface OutputObject {
    requestId: bigint;
    numWords: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResponseEvent {
  export type InputTuple = [
    requestId: BytesLike,
    uuid: string,
    response: BytesLike,
    err: BytesLike
  ];
  export type OutputTuple = [
    requestId: string,
    uuid: string,
    response: string,
    err: string
  ];
  export interface OutputObject {
    requestId: string;
    uuid: string;
    response: string;
    err: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FriendKeyManager extends BaseContract {
  connect(runner?: ContractRunner | null): FriendKeyManager;
  waitForDeployment(): Promise<this>;

  interface: FriendKeyManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DIGEST_BATCH: TypedContractMethod<[], [bigint], "view">;

  DIGEST_RETURNS: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  MERGE_FEES: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  MERGE_PIECES: TypedContractMethod<[], [bigint], "view">;

  MIN_USERS: TypedContractMethod<[], [bigint], "view">;

  RANDOM_WINDOW: TypedContractMethod<[], [bigint], "view">;

  USER_DIVIDEN: TypedContractMethod<[], [bigint], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addressPrice: TypedContractMethod<[_addr: AddressLike], [bigint], "view">;

  addressUUIDs: TypedContractMethod<[_addr: AddressLike], [string], "view">;

  addresses: TypedContractMethod<[_index: BigNumberish], [string], "view">;

  batchMint: TypedContractMethod<
    [_to: AddressLike, _mintAmount: BigNumberish],
    [void],
    "payable"
  >;

  bytesToUint256: TypedContractMethod<[_input: BytesLike], [bigint], "view">;

  claimFee: TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;

  cooldownDuration: TypedContractMethod<[], [bigint], "view">;

  feeChangeRate: TypedContractMethod<[], [bigint], "view">;

  getMintFee: TypedContractMethod<[number: BigNumberish], [bigint], "view">;

  handleOracleFulfillment: TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;

  isRegistered: TypedContractMethod<[_uuid: string], [boolean], "view">;

  keys: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  lastMintTimestamp: TypedContractMethod<[], [bigint], "view">;

  lastRequestId: TypedContractMethod<[], [bigint], "view">;

  latestMintFee: TypedContractMethod<[], [bigint], "view">;

  maxFee: TypedContractMethod<[], [bigint], "view">;

  merge: TypedContractMethod<
    [_id: BigNumberish, _level: BigNumberish],
    [void],
    "payable"
  >;

  minFee: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<[_to: AddressLike], [void], "payable">;

  mintDigest: TypedContractMethod<
    [
      _level: BigNumberish,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      _to: AddressLike
    ],
    [[bigint[], bigint[]]],
    "nonpayable"
  >;

  mintRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, boolean, string, bigint] & {
        fulfilled: boolean;
        exists: boolean;
        to: string;
        amount: bigint;
      }
    ],
    "view"
  >;

  numUsers: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingUUID: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  prices: TypedContractMethod<[_index: BigNumberish], [bigint], "view">;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  register: TypedContractMethod<
    [_uuid: string, _token: string],
    [void],
    "nonpayable"
  >;

  requestIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  s_lastError: TypedContractMethod<[], [string], "view">;

  s_lastRequestId: TypedContractMethod<[], [string], "view">;

  s_lastResponse: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  uint256ToAddress: TypedContractMethod<
    [_input: BigNumberish],
    [string],
    "view"
  >;

  uuidAddresses: TypedContractMethod<[_uuid: string], [string], "view">;

  uuidPrice: TypedContractMethod<[_uuid: string], [bigint], "view">;

  uuids: TypedContractMethod<[_index: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DIGEST_BATCH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DIGEST_RETURNS"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "MERGE_FEES"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "MERGE_PIECES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_USERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RANDOM_WINDOW"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USER_DIVIDEN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addressPrice"
  ): TypedContractMethod<[_addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "addressUUIDs"
  ): TypedContractMethod<[_addr: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "addresses"
  ): TypedContractMethod<[_index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "batchMint"
  ): TypedContractMethod<
    [_to: AddressLike, _mintAmount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "bytesToUint256"
  ): TypedContractMethod<[_input: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimFee"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cooldownDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeChangeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMintFee"
  ): TypedContractMethod<[number: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "handleOracleFulfillment"
  ): TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[_uuid: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "keys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "lastMintTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastRequestId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestMintFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "merge"
  ): TypedContractMethod<
    [_id: BigNumberish, _level: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "minFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<[_to: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "mintDigest"
  ): TypedContractMethod<
    [
      _level: BigNumberish,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      _to: AddressLike
    ],
    [[bigint[], bigint[]]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, boolean, string, bigint] & {
        fulfilled: boolean;
        exists: boolean;
        to: string;
        amount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "numUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingUUID"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "prices"
  ): TypedContractMethod<[_index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<[_uuid: string, _token: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_lastError"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "s_lastRequestId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "s_lastResponse"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uint256ToAddress"
  ): TypedContractMethod<[_input: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "uuidAddresses"
  ): TypedContractMethod<[_uuid: string], [string], "view">;
  getFunction(
    nameOrSignature: "uuidPrice"
  ): TypedContractMethod<[_uuid: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "uuids"
  ): TypedContractMethod<[_index: BigNumberish], [string], "view">;

  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RequestFulfilled(bytes32)"
  ): TypedContractEvent<
    RequestFulfilled_bytes32_Event.InputTuple,
    RequestFulfilled_bytes32_Event.OutputTuple,
    RequestFulfilled_bytes32_Event.OutputObject
  >;
  getEvent(
    key: "RequestFulfilled(uint256,uint256[])"
  ): TypedContractEvent<
    RequestFulfilled_uint256_uint256_array_Event.InputTuple,
    RequestFulfilled_uint256_uint256_array_Event.OutputTuple,
    RequestFulfilled_uint256_uint256_array_Event.OutputObject
  >;
  getEvent(
    key: "RequestSent(bytes32)"
  ): TypedContractEvent<
    RequestSent_bytes32_Event.InputTuple,
    RequestSent_bytes32_Event.OutputTuple,
    RequestSent_bytes32_Event.OutputObject
  >;
  getEvent(
    key: "RequestSent(uint256,uint32)"
  ): TypedContractEvent<
    RequestSent_uint256_uint32_Event.InputTuple,
    RequestSent_uint256_uint32_Event.OutputTuple,
    RequestSent_uint256_uint32_Event.OutputObject
  >;
  getEvent(
    key: "Response"
  ): TypedContractEvent<
    ResponseEvent.InputTuple,
    ResponseEvent.OutputTuple,
    ResponseEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RequestFulfilled(bytes32)": TypedContractEvent<
      RequestFulfilled_bytes32_Event.InputTuple,
      RequestFulfilled_bytes32_Event.OutputTuple,
      RequestFulfilled_bytes32_Event.OutputObject
    >;
    "RequestFulfilled(uint256,uint256[])": TypedContractEvent<
      RequestFulfilled_uint256_uint256_array_Event.InputTuple,
      RequestFulfilled_uint256_uint256_array_Event.OutputTuple,
      RequestFulfilled_uint256_uint256_array_Event.OutputObject
    >;
    "RequestSent(bytes32)": TypedContractEvent<
      RequestSent_bytes32_Event.InputTuple,
      RequestSent_bytes32_Event.OutputTuple,
      RequestSent_bytes32_Event.OutputObject
    >;
    "RequestSent(uint256,uint32)": TypedContractEvent<
      RequestSent_uint256_uint32_Event.InputTuple,
      RequestSent_uint256_uint32_Event.OutputTuple,
      RequestSent_uint256_uint32_Event.OutputObject
    >;

    "Response(bytes32,string,bytes,bytes)": TypedContractEvent<
      ResponseEvent.InputTuple,
      ResponseEvent.OutputTuple,
      ResponseEvent.OutputObject
    >;
    Response: TypedContractEvent<
      ResponseEvent.InputTuple,
      ResponseEvent.OutputTuple,
      ResponseEvent.OutputObject
    >;
  };
}
